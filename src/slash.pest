WHITESPACE = _{  " " | "\t" | NEWLINE }
COMMENT = _{ "#" ~ (!(NEWLINE | EOI) ~ ANY)* ~ (NEWLINE | &EOI) }

word_char = _{ !(WHITESPACE | special_word_char ) ~ ANY | "\\" ~ ANY }
special_word_char = { "\"" | "\\" | "|" | ">" | "$" | ";" | "}" }
word = @{ word_char+ }

file = { SOI ~ (block | statement | ";")* ~ EOI }
block = { "{" ~ (block | statement | ";")* ~ "}" }
statement = _{ var_declaration | function_declaration | var_assignment | indexed_var_assignment | dot_var_assignment |
 export_statement  | while_statement | for_in_statement | for_std_statement | if_statement | return_statement | break_statement |
 continue_statement | match_statement | function_call_statement | chain }

chain = { command ~ pipe* ~ redirection? ~ capture? }
pipe = { "|" ~ command }
redirection = _{ redirection_append | redirection_create }
redirection_append =  { ">>" ~ command_element }
redirection_create =  { ">" ~ command_element }
capture = { "$>" ~ var_name }
command = ${ command_element ~ (command_whitespace+ ~ command_element)* ~ command_whitespace* }
command_whitespace = _{ " " | "\t" | ("\\" ~ NEWLINE) }
command_element = _{ !"$>" ~ (env_var | "$(" ~ expression ~ ")" | string_literal | word) }

while_statement = { "while" ~ expression ~ block }

for_in_statement = {
    ( "for" ~ var_name ~ "in" ~ expression ~ block ) |
    ( "for" ~ "(" ~ var_name ~ "in" ~ expression ~ ")" ~ block )
}

for_std_statement = {
    "for" ~ var_name ~ "=" ~ expression  ~ ";" ~ expression ~ ";" ~ var_assignment ~ block |
    "for" ~ "(" ~ var_name ~ "=" ~ expression  ~ ";" ~ expression ~ ";" ~ var_assignment ~ ")" ~ block
}

if_statement = { "if" ~ expression ~ (block | statement) ~ ("else" ~ "if" ~ expression ~ (block | statement))* ~ ("else"  ~ ( block | statement))? }

function_declaration = { "function" ~ var_name ~ "(" ~ arg_list ~ ")" ~ block }
arg_list = _{ (var_name ~ ("," ~ var_name)*)? }
return_statement = { "return" ~ expression }
break_statement = { "break" }
continue_statement = { "continue" }

function_call_statement = { function_identifier ~"(" ~  expression ~ ")" }
function_identifier = { var_name }
match_statement = { "match" ~ expression ~ "{" ~ match_term+ ~ "}" }
match_term = { "_" ~ "=>" ~ block | match_expression ~ ( ";" ~ match_expression )* ~ "=>" ~ block }
match_expression = { expression ~ ( "->" ~ expression )? }

var_declaration = { "let" ~ var_name ~  "=" ~ expression  }
var_assignment = { var_name ~ "=" ~ expression }
indexed_var_assignment = { var_name ~ "[" ~ expression ~ "]" ~ "=" ~ expression }
dot_var_assignment = { var_name ~ "." ~ var_name ~ "=" ~ expression }

export_statement = { "export" ~ var_name ~ ("=" ~ expression)? }
var_name = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHA | "_" | ASCII_DIGIT)* }

expression = { term ~ ( operator ~ term | indexer ~ expression ~ "]" | function_call_indicator ~ expression ~ ")" )* }
operator = _{ add | subtract | multiply| divide | power | equals | less_than | greater_than | not_equals |
              and | or | arg_list_constructor | map_field_constructor  | slice_constructor | infix_dot}
    add = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide = { "/" }
    power = { "^" }
    equals = { "==" }
    less_than = { "<" }
    greater_than = { ">" }
    not_equals = { "!=" }
    and = { "&&" }
    or = { "||" }
    arg_list_constructor = { "," }
    map_field_constructor = { ":" }
    slice_constructor = { ".." }
    infix_dot = { "." }

indexer = { "[" }
function_call_indicator = { "(" }

term = _{ literal |  var_name | env_var |  "(" ~ expression ~ ")" | not_expression | anonymous_function | empty_expression_list }
empty_expression_list = { &( ")" | "]" | "}" ) }
not_expression = { ("!" | "not") ~ expression }
env_var = { "$" ~ var_name }
anonymous_function = { "|" ~ arg_list ~ "|" ~ block }
literal = { numeric_literal | string_literal | list_literal | map_literal }
numeric_literal = @{ "-"? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
string_literal = @{ "\"" ~ NEWLINE? ~ string_content ~ "\"" }
list_literal = { "[" ~ expression ~ "]" }
map_literal = { "{" ~ expression ~  "}" }
string_content = { ( "\\\"" | !"\"" ~ ANY )* }